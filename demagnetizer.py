import tornado.ioloop
import tornado.web
import tornado.template 

import libtorrent
import json
import re
import time
import uuid
import binascii

session_params = {
    'save_path':'/tmp',
    'storage_mode': libtorrent.storage_mode_t.storage_mode_sparse,
    'paused': True,
    'auto_managed': True,
    'duplicate_is_error': False
}

max_wait = 15

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        loader = tornado.template.Loader("templates")
        self.write(loader.load("index.html").generate())

class Magnethandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    def post(self):
        response = dict()

        response['uri'] = str(self.get_argument('uri'))

        # TODO: improve magnet URI validation regexp
        if not re.match(r"magnet\:\?xt=urn\:btih\:(.*)", response['uri'], re.M|re.I):
            response['status'] = 'error'
            response['error_description'] = 'URI does not match correct pattern'
        else:
            session = libtorrent.session()
            torrent = libtorrent.add_magnet_uri(session, response['uri'], session_params)

            wait_counter = 0
            torrent_info_received = True

            while (not torrent.has_metadata()): 
                wait_counter += 1

                if wait_counter >= max_wait:
                    torrent_info_received = False
                    break

                time.sleep(1)

            if not torrent_info_received:
                response['status'] = 'error'
                response['error_description'] = 'Torrent request took too much time, check your magnet or try another one'
            else:
                torrent_info = torrent.get_torrent_info()
                response['status'] = 'success'
                response['name'] = torrent_info.name()
                response['info_hash'] = str(uuid.uuid5(uuid.NAMESPACE_URL, response['name']))
                response['comment'] = torrent_info.comment()
                response['creator'] = torrent_info.creator()
                response['creation_date'] = str(torrent_info.creation_date())
                response['num_files'] = torrent_info.num_files()
                response['total_size'] = torrent_info.total_size()

                response['trackers'] = []
                response['files'] = []

                for tracker in torrent_info.trackers():
                    response['trackers'].append(tracker.url)

                for file_info in torrent_info.files():
                    response['files'].append({
                        'path': file_info.path,
                        'size': file_info.size,
                    })

                # create torrent file from magnet
                file_storage = libtorrent.file_storage()
                for tfile in torrent_info.files(): file_storage.add_file(tfile)
                torrent_file = libtorrent.create_torrent(file_storage) 
                for tracker in torrent_info.trackers(): torrent_file.add_tracker(tracker.url, tracker.tier)
                torrent_file.set_comment("Generated by demagnetizer from magnet " + response['uri'])
                torrent_file.set_creator("Torrent demagnetizer")
                torrent_file.set_priv(torrent_info.priv())
                f = open("torrents/" + response['info_hash'] + ".torrent", "wb")
                generated_torrent = torrent_file.generate()
                generated_torrent["info"]["pieces"] = "".join([binascii.unhexlify("%s" % torrent_info.hash_for_piece(i)) for i in range(torrent_info.num_pieces())])
                generated_torrent["info"]["piece length"] = torrent_info.piece_length()
                generated_torrent["info"]["length"] = torrent_info.total_size()
                f.write(libtorrent.bencode(generated_torrent))
                f.close()

            session.remove_torrent(torrent)

        self.set_header("Content-Type", "application/json")
        self.write(json.dumps(response, indent=4))
        self.finish()

application = tornado.web.Application([
    (r"/", MainHandler),
    (r"/demagnetize", Magnethandler),
    (r"/torrents/(.*)", tornado.web.StaticFileHandler, {"path": "/home/demagnetize/torrents"}),
    (r"/static/(.*)", tornado.web.StaticFileHandler, {"path": "/home/demagnetize/static"}),
], debug=True)

if __name__ == "__main__":
    application.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
